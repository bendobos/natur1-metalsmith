{
	"version": 3,
	"file": "theme.css",
	"sources": [
		"theme.scss",
		"../../node_modules/bourbon-neat/core/_neat.scss",
		"../../node_modules/bourbon-neat/core/neat/settings/_settings.scss",
		"../../node_modules/bourbon-neat/core/neat/functions/_retrieve-neat-settings.scss",
		"../../node_modules/bourbon-neat/core/neat/functions/_neat-column-default.scss",
		"../../node_modules/bourbon-neat/core/neat/functions/_neat-column-width.scss",
		"../../node_modules/bourbon-neat/core/neat/functions/_neat-column-ratio.scss",
		"../../node_modules/bourbon-neat/core/neat/functions/_neat-float-direction.scss",
		"../../node_modules/bourbon-neat/core/neat/functions/_neat-merge-defaults.scss",
		"../../node_modules/bourbon-neat/core/neat/functions/_neat-opposite-direction.scss",
		"../../node_modules/bourbon-neat/core/neat/functions/_neat-parse-columns.scss",
		"../../node_modules/bourbon-neat/core/neat/functions/_neat-parse-media.scss",
		"../../node_modules/bourbon-neat/core/neat/functions/_neat-append-grid-visual.scss",
		"../../node_modules/bourbon-neat/core/neat/mixins/_grid-collapse.scss",
		"../../node_modules/bourbon-neat/core/neat/mixins/_grid-column.scss",
		"../../node_modules/bourbon-neat/core/neat/mixins/_grid-container.scss",
		"../../node_modules/bourbon-neat/core/neat/mixins/_grid-media.scss",
		"../../node_modules/bourbon-neat/core/neat/mixins/_grid-push.scss",
		"../../node_modules/bourbon-neat/core/neat/mixins/_grid-shift.scss",
		"../../node_modules/bourbon-neat/core/neat/mixins/_grid-visual.scss",
		"_variables.scss",
		"_grid.scss",
		"_typography.scss",
		"_interactive.scss"
	],
	"sourcesContent": [
		"@import '../../node_modules/bourbon-neat/core/_neat';\n@import '_variables.scss';\n@import '_grid.scss';\n@import '_typography.scss';\n@import '_interactive.scss';\n@import url('https://fonts.googleapis.com/css?family=Nunito|Varela+Round');\n\nbody {\n  font-family: \"Varela Round\", sans-serif;\n}\n",
		"@charset \"UTF-8\";\n// Neat 2.0.0\n// http://neat.bourbon.io\n// Copyright 2012 thoughtbot, inc.\n// MIT License\n\n@import \"neat/settings/settings\";\n\n@import \"neat/functions/retrieve-neat-settings\";\n@import \"neat/functions/neat-column-default\";\n@import \"neat/functions/neat-column-width\";\n@import \"neat/functions/neat-column-ratio\";\n@import \"neat/functions/neat-float-direction\";\n@import \"neat/functions/neat-merge-defaults\";\n@import \"neat/functions/neat-opposite-direction\";\n@import \"neat/functions/neat-parse-columns\";\n@import \"neat/functions/neat-parse-media\";\n@import \"neat/functions/neat-append-grid-visual\";\n\n@import \"neat/mixins/grid-collapse\";\n@import \"neat/mixins/grid-column\";\n@import \"neat/mixins/grid-container\";\n@import \"neat/mixins/grid-media\";\n@import \"neat/mixins/grid-push\";\n@import \"neat/mixins/grid-shift\";\n@import \"neat/mixins/grid-visual\";\n",
		"@charset \"UTF-8\";\n/// This variable is a sass map that overrides Neat's default grid settings.\n/// Use this to define your project's grid properties incluting gutters and\n/// total column count.\n///\n/// @type map\n///\n/// @group settings\n///\n/// @name Neat grid\n///\n/// @property {number (unitless)} columns [12]\n///   Default number of the total grid columns.\n///\n/// @property {number (with unit)} gutter [20px]\n///   Default grid gutter width between columns.\n///\n/// @example scss\n///   $neat-grid: (\n///     columns: 12,\n///     gutter: 20px,\n///   );\n\n$neat-grid: () !default;\n\n/// If you need multiple grids in a single project, you can do\n/// this by defining a new map stored within a variable of your choosing. This\n/// variable can then be passed directly in to any of Neat's mixins like\n/// [`grid-column(12, $my-custom-grid)`](#grid-column).\n///\n/// Custom grids are especially useful with [`grid-media`](#grid-media). By\n/// defining a `media` attribute within your custom grid, you are able to easily\n/// define gutter width and total column count as well the breakpoint at which\n/// they should activate.\n///\n/// @type map\n///\n/// @group settings\n///\n/// @name Custom grids\n///\n/// @property {number (unitless)} columns [12]\n///   Number of the total grid columns.\n///\n/// @property {number (with unit)} gutter [20px]\n///   Grid gutter width between columns.\n///\n/// @property {number (with unit) | string | null} media [null]\n///   The `@media` definition that is used by the [`grid-media`](#grid-media)\n///   mixin to detirmine the media properties.\n///\n/// @property {color} color [null]\n///   The color used by [`grid-visual`](#grid-visual) to create the guides.\n///\n/// @property {string} direction [ltr]\n///   The float direction used throughout the grid.\n///\n/// @example scss\n///   $my-custom-grid: (\n///     columns: 12,\n///     gutter: 20px,\n///     media: 1200px,\n///     color: rgba(#00d4ff, 0.25),\n///     direction: ltr,\n///   );\n///\n///   $other-custom-grid-for-print: (\n///     columns: 14,\n///     gutter: 1.5rem,\n///     media: print,\n///   );\n///\n\n$neat-custom-grid: () !default;\n",
		"@charset \"UTF-8\";\n/// This function recives a grid map and merges it with Neat's defauls.\n/// It then returns the value of the property that has been passed to it.\n///\n/// @argument {map} $grid\n///\n/// @argument {string} $setting\n///\n/// @return {boolean | color | list | number | string}\n///\n/// @example scss\n///   _retrieve-neat-setting($neat-grid, columns)\n///\n/// @access private\n\n@function _retrieve-neat-setting($grid, $setting) {\n  $_grid-settings: map-merge(_neat-merge-defaults($neat-grid), $grid);\n  @return map-get($_grid-settings, $setting);\n}\n",
		"@charset \"UTF-8\";\n/// Determine if a column count has been given.\n/// If no columns have been given return the grid's total column count.\n///\n/// @argument {map} $grid\n///\n/// @argument {number (unitless) | null} $columns\n///\n/// @return {number}\n///\n/// @example scss\n///   _neat-column-default($neat-grid, 4)\n///\n/// @access private\n\n@function _neat-column-default($grid, $columns) {\n  @if $columns == null {\n    $_grid-columns: _retrieve-neat-setting($grid, columns);\n    @return $_grid-columns;\n  } @else {\n    @return $columns;\n  }\n}\n",
		"@charset \"UTF-8\";\n/// Return a calulated column width that can then be passed in to a `calc()`.\n///\n/// @argument {map} $grid\n///\n/// @argument {number} $columns\n///\n/// @return {string}\n///\n/// @example scss\n///   _neat-column-width($neat-grid, 4)\n///\n/// @access private\n\n@function _neat-column-width($grid, $columns) {\n  $_column-ratio: _neat-column-ratio($grid, $columns);\n  $_gutter: _retrieve-neat-setting($grid, gutter);\n\n  @if $_gutter == 0 {\n    @return unquote(\"#{percentage($_column-ratio)}\");\n  } @else {\n    $_gutter-affordance: $_gutter + ($_gutter * $_column-ratio);\n    @return unquote(\"#{percentage($_column-ratio)} - #{$_gutter-affordance}\");\n  }\n}\n",
		"@charset \"UTF-8\";\n/// Determine the ratio of `$columns` to the total column count.\n/// If `$columns` is more than one value, they are handed to\n/// `_neat-parse-columns()` which will detirmine the total columns and use this\n/// value instead of `total-columns`.\n///\n/// @argument {map} $grid\n///\n/// @argument {number | list} $columns\n///\n/// @return {number}\n///\n/// @example scss\n///   _neat-column-ratio($grid, 3)\n///\n/// @access private\n\n@function _neat-column-ratio($grid, $columns) {\n  @if length($columns) > 1 {\n    @return nth($columns, 1) / _neat-parse-columns($columns);\n  } @else if $columns {\n    @return $columns / _retrieve-neat-setting($grid, columns);\n  }\n}\n",
		"@charset \"UTF-8\";\n/// Return the float direction of the grid.\n///\n/// @argument {map} $grid\n///\n/// @return {string}\n///\n/// @example scss\n///   _neat-float-direction($neat-grid)\n///\n/// @access private\n\n@function _neat-float-direction($grid) {\n  $_direction: _retrieve-neat-setting($grid, direction);\n  $_float-direction: null;\n  @if $_direction == \"ltr\" {\n      $_float-direction: left;\n  } @else if $_direction == \"rtl\" {\n    $_float-direction: right;\n  }\n  @return $_float-direction;\n}\n",
		"@charset \"UTF-8\";\n/// Apply Neat's default properties to undefined values within a map.\n///\n/// @argument {map} $grid\n///\n/// @return {map}\n///\n/// @example scss\n///   _retrieve-neat-setting($neat-grid)\n///\n/// @access private\n\n@function _neat-merge-defaults($grid) {\n  $_merged-grid: map-merge((\n    columns: 12,\n    gutter: 20px,\n    media: null,\n    color: rgba(#00d4ff, 0.25),\n    direction: ltr,\n  ), $grid);\n\n  @return $_merged-grid;\n}\n",
		"@charset \"UTF-8\";\n/// Return the oppoite of the float direction of the grid.\n///\n/// @argument {map} $grid\n///\n/// @return {string}\n///\n/// @example scss\n///   _neat-opposite-direction($neat-grid)\n///\n/// @access private\n\n@function _neat-opposite-direction($grid) {\n  $_direction: _retrieve-neat-setting($grid, direction);\n  $_float-direction: null;\n  @if $_direction == \"ltr\" {\n      $_float-direction: right;\n  } @else if $_direction == \"rtl\" {\n    $_float-direction: left;\n  }\n  @return $_float-direction;\n}\n",
		"@charset \"UTF-8\";\n/// Parse a column count like `3 of 5` and retur the total coloumn count.\n/// This is to allow a shorthand for custom grids without using a settings map.\n///\n///\n/// @argument {list} $span\n///\n/// @return {number}\n///\n/// @example scss\n///   _neat-parse-columns(3 of 5)\n///\n/// @access private\n\n@function _neat-parse-columns($span) {\n  @if length($span) == 3 {\n    $_total-columns: nth($span, 3);\n    @return $_total-columns;\n  } @else if length($span) == 2 or if length($span) >= 3 {\n    @error \"`$column` should contain 2 values, seperated by an `of`\";\n  }\n}\n",
		"@charset \"UTF-8\";\n/// Parse media types. If the property is a string then return it, otherwise\n/// assume screen and min-width.\n///\n/// @argument {string | number (with unit)} $media\n///\n/// @return {number}\n///\n/// @example scss\n///   _neat-parse-media($grid, 1000px)\n///\n/// @access private\n\n@function _neat-parse-media($media) {\n  @if type-of($media) == number {\n    @return \"only screen and (min-width: #{$media})\";\n  } @else if type-of($media) == string {\n    @return \"#{$media}\";\n  }\n}\n",
		"@charset \"UTF-8\";\n/// Append attributes to a the `$_grid-visual` variable in `grid-visual` mixin\n///\n/// @argument {map} $grid\n///\n/// @argument {number (unitless) | null} $columns\n///\n/// @return {number}\n///\n/// @example scss\n///   _neat-column-default($neat-grid, 4)\n///\n/// @access private\n\n@function _neat-append-grid-visual($grid-visual-list, $attributes) {\n  @each $attribute in $attributes {\n    $grid-visual-list: append($grid-visual-list, $attribute, comma);\n  }\n\n  @return $grid-visual-list;\n}\n",
		"@charset \"UTF-8\";\n/// Creates collapsed grid object that consumes the gutters of its container,\n/// for use in nested layouts.\n///\n/// @group features\n///\n/// @name Grid collapse\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to generate the collapsed container.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-collapse;\n///   }\n///\n/// @example css\n///   .element {\n///     float: left;\n///     margin-left: -20px;\n///     margin-right: -20px;\n///     width: calc(100% + 40px);\n///   }\n\n@mixin grid-collapse($grid: $neat-grid) {\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n  @if unit($_grid-gutter) == \"%\" {\n    @warn \"`grid-collapse` is not compatible with percentage based gutters.\";\n  }\n\n  margin-#{_neat-float-direction($grid)}: -($_grid-gutter);\n  margin-#{_neat-opposite-direction($grid)}: -($_grid-gutter);\n  width: calc(100% + #{($_grid-gutter * 2)});\n}\n",
		"@charset \"UTF-8\";\n/// Creates a grid column of requested size.\n///\n/// @group features\n///\n/// @name Grid column\n///\n/// @argument {number (unitless)} $columns [null]\n///   Specifies the number of columns an element should span based on the total\n///   columns of the grid.\n///\n///   This can also be defined in a shorthand syntaxt which also contains the\n///   total column count such as `3 of 5`.\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to generate the column.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-column(3);\n///   }\n///\n/// @example css\n///   .element {\n///     width: calc(25% - 25px);\n///     float: left;\n///     margin-left: 20px;\n///   }\n\n@mixin grid-column($columns: null, $grid: $neat-grid) {\n  $columns: _neat-column-default($grid, $columns);\n  $_grid-columns: _retrieve-neat-setting($grid, columns);\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n  width: calc(#{_neat-column-width($grid, $columns)});\n  float: _neat-float-direction($grid);\n  margin-#{_neat-float-direction($grid)}: $_grid-gutter;\n}\n",
		"@charset \"UTF-8\";\n/// Creates a grid container with clearfix.\n///\n/// @group features\n///\n/// @name Grid container\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to generate the container.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-container;\n///   }\n///\n/// @example css\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: block;\n///   }\n\n@mixin grid-container($grid: $neat-grid) {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: block;\n  }\n}\n",
		"@charset \"UTF-8\";\n/// `grid-media` allows you to change your layout based on a media query.\n/// For example, an object can span 3 columns on small screens and 6 columns\n/// on large screens.\n///\n/// You can take this a step further and set different grid attributes like\n/// gutter size and total column count for each media query. So, for example,\n/// you can have a `1rem` gutter on small screens, and a `2rem` gutter on large\n/// screens.\n///\n/// @group features\n///\n/// @name Grid media\n///\n/// @argument {map} $grid\n///   The grid to be used within the scope of the block.\n///   This grid should include the `media` property to determine the expression\n///   for the media query.\n///\n/// @content\n///   Grid media will temporarily the override the default grid with the\n///   attributes of the custom grid. This change is scoped to within the mixin\n///   block, and once the mixin has ended the default grid will revert to its\n///   original state as defined by `$neat-grid`. This allows for different\n///   gutter width and column count based on screen size or other properties.\n///\n/// @example scss\n///   $custom-neat-grid: (\n///     columns: 12,\n///     gutter: 50px,\n///     media: 1000px,\n///   );\n///\n///   .element {\n///     @include grid-column(3);\n///\n///     @include grid-media($custom-neat-grid){\n///       @include grid-column(6);\n///     }\n///   }\n///\n/// @example css\n///   .element {\n///     width: calc(25% - 25px);\n///     float: left;\n///     margin-left: 20px;\n///   }\n///\n///   @media only screen and (min-width: 1000px) {\n///     .element {\n///       width: calc(50% - 75px);\n///       float: left;\n///       margin-left: 50px;\n///     }\n///   }\n\n@mixin grid-media($grid) {\n  $_media: _retrieve-neat-setting($grid, media);\n  $_query: _neat-parse-media($_media);\n\n  @media #{$_query} {\n    $_default-neat-grid: $neat-grid;\n    $neat-grid: map-merge($neat-grid, $grid) !global;\n    @content;\n    $neat-grid: $_default-neat-grid !global;\n  }\n}\n",
		"@charset \"UTF-8\";\n/// Push or pull a grid column by manipulating its left margin.\n///\n/// @group features\n///\n/// @name Grid push\n///\n/// @argument {number (unitless)} $push [false]\n///   The number of columns to push the column.\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to detirmine how far to push the column.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-push(3);\n///   }\n///\n/// @example css\n///   .element {\n///     margin-left: calc(25% - 25px + 40px);\n///   }\n\n@mixin grid-push($push: false, $grid: $neat-grid) {\n  $_grid-columns: _retrieve-neat-setting($grid, columns);\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n  @if $push {\n    $_gutter-affordance: $_grid-gutter * 2;\n    $_margin-value: calc(#{_neat-column-width($grid, $push)} + #{$_gutter-affordance});\n    margin-#{_neat-float-direction($grid)}: $_margin-value;\n  } @else {\n    $_margin-value: _retrieve-neat-setting($grid, gutter);\n    margin-#{_neat-float-direction($grid)}: $_margin-value;\n  }\n}\n",
		"@charset \"UTF-8\";\n/// Shift columns and reorder them within their container using relative\n/// positioning.\n///\n/// @group features\n///\n/// @name Grid shift\n///\n/// @argument {number (unitless)} $shift [false]\n///   The number of columns to shift the column.\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to detirmine how far to shift the column.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-shift(3);\n///   }\n///\n/// @example css\n///   .element {\n///     left: calc(25% - 25px + 20px);\n///     position: relative;\n///   }\n\n@mixin grid-shift($shift: false, $grid: $neat-grid) {\n  @if $shift {\n    $_shift-value: calc(#{_neat-column-width($grid, $shift)} + #{_retrieve-neat-setting($grid, gutter)});\n    #{_neat-float-direction($grid)}: $_shift-value;\n  } @else {\n    #{_neat-float-direction($grid)}: auto;\n  }\n\n  position: relative;\n}\n",
		"@charset \"UTF-8\";\n/// Creates a series of guide lines using the `background-image` property on a\n/// grid container to visualise the columns and gutters of the grid.\n///\n/// @group features\n///\n/// @name Grid visual\n///\n/// @argument {color} $color\n///   The color of the guide lines created.\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid used to determine the guides\n///\n/// @example scss\n///   .element {\n///     @include grid-visual;\n///   }\n///\n/// @example css\n///   .element {\n///     background-image: linear-gradient( … ) ;\n///   }\n\n@mixin grid-visual($color: null, $grid: $neat-grid) {\n  @if not $color {\n    $color: _retrieve-neat-setting($grid, color);\n  }\n\n  $_grid-columns: _retrieve-neat-setting($grid, columns);\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n  $_grid-visual-object: () !default;\n  $_grid-visual:\n    $color,\n    $color $_grid-gutter,\n    transparent $_grid-gutter,\n  ;\n\n  @for $i from 1 to $_grid-columns {\n    $_grid-visual-local: (\n      #{$i}: \"#{_neat-column-width($grid, $i)} + #{$_grid-gutter}\",\n    );\n\n    $_grid-visual-object: map-merge($_grid-visual-object, $_grid-visual-local);\n  }\n\n  @each $stop, $location in $_grid-visual-object {\n    $_grid-visual-loop-list:\n      transparent calc(#{$location}),\n      $color calc(#{$location}),\n      $color calc(#{$location} + #{$_grid-gutter}),\n      transparent calc(#{$location} + #{$_grid-gutter}),\n    ;\n\n    $_grid-visual: _neat-append-grid-visual($_grid-visual, $_grid-visual-loop-list);\n  }\n\n  $_grid-visual-loop-list:\n      transparent calc(100% - #{$_grid-gutter}),\n      $color calc(100% - #{$_grid-gutter}),\n      $color calc(100%),\n  ;\n\n  $_grid-visual: _neat-append-grid-visual($_grid-visual, $_grid-visual-loop-list);\n\n  background-image: linear-gradient(to right, $_grid-visual);\n}\n",
		"/* Colors */\n$ci-green: #9CC51E;\n$ci-green-dark: #6F8D13;\n\n$light-grey: #F5F5F5;\n$super-light-grey: #FAFAFA;\n\n$nav-grey: #5F5F5F;\n\n$hero-text: #5F5F5F;\n\n\n/* Shadows */\n$shadow-normal: 0 7px 25px 0 rgba(0,0,0,0.5);\n$shadow-hover: 0 7px 25px 0 rgba(0,0,0,0.8);\n\n$shadow-light: 0 7px 25px 0 rgba(0,0,0,0.15);\n$shadow-light-hover: 0 7px 25px 0 rgba(0,0,0,0.35);\n",
		"html, body {\n  margin: 0;\n  padding: 0;\n}\n\n#wrapper {\n  @include grid-container;\n  overflow: hidden;\n}\n\n#top-bar {\n  @include grid-column(12);\n  width: calc(100% - 20px);\n  margin-left: 0;\n  height: 40px;\n  font-size: 13px;\n  line-height: 18px;\n  padding-left: 20px;\n  background: $light-grey;\n  border-bottom: 2px solid $ci-green;\n\n  ul {\n    li {\n      list-style: none;\n      float: left;\n      margin-right: 20px;\n\n      .icon {\n        color: $ci-green;\n        margin-right: 5px;\n      }\n    }\n  }\n}\n\nheader {\n  @include grid-column(12);\n  width: calc(100% - 60px);\n  margin-left: 0;\n  height: 60px;\n  padding: 55px 0 0 60px;\n\n  #logo {\n    display: block;\n    float: left;\n  }\n\n  nav {\n    float: left;\n    margin-left: 40px;\n\n    ul {\n      list-style-type: none;\n      position: relative;\n\n      li {\n        float: left;\n        padding: 10px 15px 10px 15px;\n        margin-right: 20px;\n        font-size: 18px;\n        top: 25%;\n        transform: translateY(-25%);\n\n        &.uk-active {\n          border: 1px solid $ci-green;\n          border-radius: 100px;\n\n          a {\n            color: black;\n          }\n        }\n\n        a {\n          text-decoration: none;\n          color: $nav-grey;\n        }\n      }\n    }\n  }\n}\n\n#hero {\n  @include grid-column(12);\n  width: calc(100% - 60px);\n  padding: 40px 0px 0 60px;\n  margin-left: 0;\n}\n.curved-lines {\n  margin-top: -50px;\n  width: 100%;\n\n  &.footer {\n    transform: scaleX(-1.1);\n    filter: FlipH;\n    margin-top: 50px;\n  }\n}\n\nmain {\n  @include grid-column(12);\n  @include grid-collapse;\n  width: 100%;\n\n  #content {\n    @include grid-column(12);\n    @include grid-collapse;\n\n    .home-section {\n      padding: 20px 100px 0 100px;\n      clear: both;\n\n      &.first {\n        margin-top: -4px;\n      }\n\n      &.grey {\n        background-color: $light-grey;\n      }\n      &.white {\n        background-color: white;\n      }\n\n      #map {\n        @include grid-column(12);\n        @include grid-collapse;\n        width: calc(100% + 160px);\n        height: 400px;\n        margin-left: -60px;\n        padding-top: 50px;\n        background: $light-grey;\n      }\n\n      .full-width-container {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n        min-height: 300px;\n        margin: 50px 0 0 -60px;\n        padding: 0 80px 0 80px;\n\n        &.green {\n          background-color: $ci-green;\n        }\n\n        .circles {\n          display: flex;\n          align-items: center;\n          flex-wrap: wrap;\n\n          .circle-wrapper {\n            margin-right: 50px;\n            width: 150px;\n\n            .circle-image {\n              height: 140px;\n              width: 140px;\n              border-radius: 50%;\n              border: 9px solid white;\n              box-shadow: $shadow-normal;\n              transition: all 0.5s;\n\n              &:hover {\n                height: 150px;\n                width: 150px;\n                box-shadow: $shadow-hover;\n              }\n            }\n          }\n        }\n      }\n\n      #profile-card {\n        @include grid-column(6);\n        @include grid-shift(3);\n        clear: both;\n        margin: 0 auto;\n        background: $super-light-grey;\n        margin-top: 80px;\n        margin-bottom: 60px;\n        border-radius: 5px;\n        box-shadow: $shadow-light;\n        transition: all 0.5s;\n\n        &:hover {\n          box-shadow: $shadow-light-hover;\n        }\n\n        ul {\n            padding: 0 60px 0 60px;\n        }\n\n        #circle-avatar {\n          display: block;\n          height: 120px;\n          width: 120px;\n          border-radius: 50%;\n          border: 4px solid white;\n          box-shadow: $shadow-normal;\n          margin: 0 auto;\n          margin-top: -35px;\n        }\n      }\n    }\n  }\n}\n\nfooter {\n  @include grid-column(12);\n  @include grid-collapse;\n  background: $light-grey;\n  margin-top: -5px;\n  height: 100px;\n}\n",
		".uk-article-title {\n  display: none;\n}\n\n#hero {\n  h1 {\n    font-size: 1.6em;\n  }\n\n  p {\n    color: $hero-text;\n    max-width: 800px;\n    font-size: 1.1em;\n    line-height: 1.6em;\n    margin: 0;\n  }\n}\n\n#content {\n  .home-section {\n    h1 {\n      font-size: 1.6em;\n    }\n\n    p {\n      color: $hero-text;\n      max-width: 800px;\n      font-size: 1.1em;\n      line-height: 1.6em;\n      margin: 0;\n    }\n  }\n}\n\n.circle-wrapper {\n  text-align: center;\n\n  h2 {\n    font-size: 1em;\n  }\n}\n\n#profile-card {\n  h1 {\n    text-align: center;\n  }\n\n  ul {\n    list-style-type: none;\n\n    li {\n      position: relative;\n      line-height: 1.5em;\n      margin: 0 0 20px 20px;\n\n      &:last-child {\n        margin-bottom: 0;\n      }\n\n      &:before {\n        content: '\\25CE';\n        color: $ci-green;\n        font-size: 0.8em;\n        position: absolute;\n        left: -25px;\n        top: 25%;\n      }\n    }\n  }\n}\n\n.button {\n  color: black;\n  text-decoration: none;\n  font-weight: bold;\n}\n",
		".button {\n  display: table;\n  height: 30px;\n  line-height: 40px;\n  display: inline-block;\n  border: 2px solid $ci-green;\n  border-radius: 5px;\n  padding: 0 15px 10px 15px;\n  margin-top: 50px;\n  margin-bottom: 50px;\n  transition: all 0.5s;\n\n  &:after {\n    content: '\\203A';\n    font-weight: lighter;\n    color: $ci-green;\n    margin-left: 10px;\n    transition: all 0.5s;\n  }\n\n  &:hover {\n    border-color: $ci-green-dark;\n\n    &:after {\n      color: $ci-green-dark;\n    }\n  }\n}\n"
	],
	"names": [],
	"mappings": "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"
}